{"ast":null,"code":"var _jsxFileName = \"/Users/galenholgate/Desktop/TwitchCRUDProject/client/src/components/WordCloud/WordCloud.js\",\n    _s = $RefreshSig$();\n\nimport styles from './styles.module.css';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMessageList, liveMessageUpdateAsync, getMessageListAsync } from 'features/messagesSlice';\nimport { io } from 'socket.io-client';\nimport { current } from 'immer';\nimport { store } from 'store';\nimport { TagCloud } from 'react-tagcloud';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordCloud = () => {\n  _s();\n\n  let currentMessages = useSelector(state => state.messages.messageList);\n  const hash = {};\n  let data2 = [];\n  useEffect(() => {\n    for (let i = 0; i < currentMessages.length; i++) {\n      currentMessages[i].message.split(' ').forEach(el => {\n        hash[el] = (hash[el] || 0) + 1;\n      });\n    }\n\n    let counter = 0;\n\n    for (const prop in hash) {\n      if (hash[prop] > 25) {\n        data2.push({\n          value: prop,\n          count: hash[prop],\n          key: String(counter)\n        });\n        counter++;\n      }\n    }\n\n    console.log(data2, 'settimeout', currentMessages);\n  }, []);\n  console.log('tagcloud comparison', currentMessages);\n\n  const SimpleCloud = () => {\n    console.log('simpcloud', data2);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data2.length > 0 && /*#__PURE__*/_jsxDEV(TagCloud, {\n        minSize: 12,\n        maxSize: 35,\n        tags: data2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data2.length > 0 ? /*#__PURE__*/_jsxDEV(SimpleCloud, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 35\n    }, this) : ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n};\n\n_s(WordCloud, \"DRu3SWwfCaYypMqxUZkTVEe+jbk=\", false, function () {\n  return [useSelector];\n});\n\n_c = WordCloud;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordCloud\");","map":{"version":3,"names":["styles","React","useEffect","useState","useRef","useNavigate","useParams","useLocation","useDispatch","useSelector","getMessageList","liveMessageUpdateAsync","getMessageListAsync","io","current","store","TagCloud","WordCloud","currentMessages","state","messages","messageList","hash","data2","i","length","message","split","forEach","el","counter","prop","push","value","count","key","String","console","log","SimpleCloud"],"sources":["/Users/galenholgate/Desktop/TwitchCRUDProject/client/src/components/WordCloud/WordCloud.js"],"sourcesContent":["import styles from './styles.module.css';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getMessageList,\n  liveMessageUpdateAsync,\n  getMessageListAsync,\n} from 'features/messagesSlice';\nimport { io } from 'socket.io-client';\nimport { current } from 'immer';\nimport { store } from 'store';\nimport { TagCloud } from 'react-tagcloud';\n\nexport const WordCloud = () => {\n  let currentMessages = useSelector(state => state.messages.messageList);\n\n  const hash = {};\n  let data2 = [];\n\n  useEffect(() => {\n    for (let i = 0; i < currentMessages.length; i++) {\n      currentMessages[i].message.split(' ').forEach(el => {\n        hash[el] = (hash[el] || 0) + 1;\n      });\n    }\n    let counter = 0;\n    for (const prop in hash) {\n      if (hash[prop] > 25) {\n        data2.push({\n          value: prop,\n          count: hash[prop],\n          key: String(counter),\n        });\n        counter++;\n      }\n    }\n    console.log(data2, 'settimeout', currentMessages);\n  }, []);\n\n  console.log('tagcloud comparison', currentMessages);\n  const SimpleCloud = () => {\n    console.log('simpcloud', data2);\n    return (\n      <div>\n        {data2.length > 0 && (\n          <TagCloud minSize={12} maxSize={35} tags={data2} />\n        )}\n      </div>\n    );\n  };\n\n  return <div>{data2.length > 0 ? <SimpleCloud /> : ''}</div>;\n};\n"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,kBAApD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,cADF,EAEEC,sBAFF,EAGEC,mBAHF,QAIO,wBAJP;AAKA,SAASC,EAAT,QAAmB,kBAAnB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAC7B,IAAIC,eAAe,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeC,WAAzB,CAAjC;EAEA,MAAMC,IAAI,GAAG,EAAb;EACA,IAAIC,KAAK,GAAG,EAAZ;EAEArB,SAAS,CAAC,MAAM;IACd,KAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,eAAe,CAACO,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;MAC/CN,eAAe,CAACM,CAAD,CAAf,CAAmBE,OAAnB,CAA2BC,KAA3B,CAAiC,GAAjC,EAAsCC,OAAtC,CAA8CC,EAAE,IAAI;QAClDP,IAAI,CAACO,EAAD,CAAJ,GAAW,CAACP,IAAI,CAACO,EAAD,CAAJ,IAAY,CAAb,IAAkB,CAA7B;MACD,CAFD;IAGD;;IACD,IAAIC,OAAO,GAAG,CAAd;;IACA,KAAK,MAAMC,IAAX,IAAmBT,IAAnB,EAAyB;MACvB,IAAIA,IAAI,CAACS,IAAD,CAAJ,GAAa,EAAjB,EAAqB;QACnBR,KAAK,CAACS,IAAN,CAAW;UACTC,KAAK,EAAEF,IADE;UAETG,KAAK,EAAEZ,IAAI,CAACS,IAAD,CAFF;UAGTI,GAAG,EAAEC,MAAM,CAACN,OAAD;QAHF,CAAX;QAKAA,OAAO;MACR;IACF;;IACDO,OAAO,CAACC,GAAR,CAAYf,KAAZ,EAAmB,YAAnB,EAAiCL,eAAjC;EACD,CAlBQ,EAkBN,EAlBM,CAAT;EAoBAmB,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCpB,eAAnC;;EACA,MAAMqB,WAAW,GAAG,MAAM;IACxBF,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBf,KAAzB;IACA,oBACE;MAAA,UACGA,KAAK,CAACE,MAAN,GAAe,CAAf,iBACC,QAAC,QAAD;QAAU,OAAO,EAAE,EAAnB;QAAuB,OAAO,EAAE,EAAhC;QAAoC,IAAI,EAAEF;MAA1C;QAAA;QAAA;QAAA;MAAA;IAFJ;MAAA;MAAA;MAAA;IAAA,QADF;EAOD,CATD;;EAWA,oBAAO;IAAA,UAAMA,KAAK,CAACE,MAAN,GAAe,CAAf,gBAAmB,QAAC,WAAD;MAAA;MAAA;MAAA;IAAA,QAAnB,GAAqC;EAA3C;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAvCM;;GAAMR,S;UACWR,W;;;KADXQ,S"},"metadata":{},"sourceType":"module"}