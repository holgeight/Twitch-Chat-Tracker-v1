{"ast":null,"code":"var _jsxFileName = \"/Users/galenholgate/Desktop/TwitchCRUDProject/client/src/components/WordCloud/WordCloud.js\",\n    _s = $RefreshSig$();\n\nimport { getMessageListAsync } from 'features/messagesSlice';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router';\nimport { TagCloud } from 'react-tagcloud';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WordCloud = (user, current) => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const dispatch = useDispatch();\n  let location = useLocation();\n  const hash = {};\n  let id = location.state.id;\n  useEffect(() => {\n    let currentMessages = dispatch(getMessageListAsync(user, id));\n    setData([]);\n\n    for (let i = 0; i < currentMessages.length; i++) {\n      currentMessages[i].message.split(' ').forEach(el => {\n        hash[el] = (hash[el] || 0) + 1;\n      });\n    }\n\n    let counter = 0;\n\n    for (const prop in hash) {\n      if (hash[prop] > 3 && prop.length > 1) {\n        let newObj = {\n          value: prop,\n          count: hash[prop],\n          key: String(counter)\n        };\n        setData(oldArr => [...oldArr, newObj]);\n        counter++;\n        console.log('setstate data', data);\n        console.log(user);\n      }\n    }\n  }, [user]);\n\n  const SimpleCloud = () => {\n    if (data.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TagCloud, {\n          minSize: 20,\n          maxSize: 55,\n          tags: data,\n          shuffle: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \" Not enough data to render wordcloud \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [' ', /*#__PURE__*/_jsxDEV(SimpleCloud, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WordCloud, \"urx0d3MeAHFHe34j5ZMCiXaRyIM=\", false, function () {\n  return [useDispatch, useLocation];\n});\n\n_c = WordCloud;\nexport const WordCloudMemo = /*#__PURE__*/React.memo(WordCloud);\n_c2 = WordCloudMemo;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WordCloud\");\n$RefreshReg$(_c2, \"WordCloudMemo\");","map":{"version":3,"names":["getMessageListAsync","React","useEffect","useState","useSelector","useDispatch","useLocation","TagCloud","WordCloud","user","current","data","setData","dispatch","location","hash","id","state","currentMessages","i","length","message","split","forEach","el","counter","prop","newObj","value","count","key","String","oldArr","console","log","SimpleCloud","WordCloudMemo","memo"],"sources":["/Users/galenholgate/Desktop/TwitchCRUDProject/client/src/components/WordCloud/WordCloud.js"],"sourcesContent":["import { getMessageListAsync } from 'features/messagesSlice';\nimport React, { useEffect, useState } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router';\n\nimport { TagCloud } from 'react-tagcloud';\n\nexport const WordCloud = (user, current) => {\n  const [data, setData] = useState([]);\n  const dispatch = useDispatch();\n  let location = useLocation();\n  const hash = {};\n  let id = location.state.id;\n\n  useEffect(() => {\n    let currentMessages = dispatch(getMessageListAsync(user, id));\n    setData([]);\n    for (let i = 0; i < currentMessages.length; i++) {\n      currentMessages[i].message.split(' ').forEach(el => {\n        hash[el] = (hash[el] || 0) + 1;\n      });\n    }\n    let counter = 0;\n    for (const prop in hash) {\n      if (hash[prop] > 3 && prop.length > 1) {\n        let newObj = {\n          value: prop,\n          count: hash[prop],\n          key: String(counter),\n        };\n        setData(oldArr => [...oldArr, newObj]);\n        counter++;\n        console.log('setstate data', data);\n        console.log(user);\n      }\n    }\n  }, [user]);\n\n  const SimpleCloud = () => {\n    if (data.length > 0) {\n      return (\n        <div>\n          <TagCloud\n            minSize={20}\n            maxSize={55}\n            tags={data}\n            shuffle={false}\n          />\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h2> Not enough data to render wordcloud </h2>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div>\n      {' '}\n      <SimpleCloud />\n    </div>\n  );\n};\n\nexport const WordCloudMemo = React.memo(WordCloud);\n"],"mappings":";;;AAAA,SAASA,mBAAT,QAAoC,wBAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;EAAA;;EAC1C,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAMU,QAAQ,GAAGR,WAAW,EAA5B;EACA,IAAIS,QAAQ,GAAGR,WAAW,EAA1B;EACA,MAAMS,IAAI,GAAG,EAAb;EACA,IAAIC,EAAE,GAAGF,QAAQ,CAACG,KAAT,CAAeD,EAAxB;EAEAd,SAAS,CAAC,MAAM;IACd,IAAIgB,eAAe,GAAGL,QAAQ,CAACb,mBAAmB,CAACS,IAAD,EAAOO,EAAP,CAApB,CAA9B;IACAJ,OAAO,CAAC,EAAD,CAAP;;IACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,eAAe,CAACE,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;MAC/CD,eAAe,CAACC,CAAD,CAAf,CAAmBE,OAAnB,CAA2BC,KAA3B,CAAiC,GAAjC,EAAsCC,OAAtC,CAA8CC,EAAE,IAAI;QAClDT,IAAI,CAACS,EAAD,CAAJ,GAAW,CAACT,IAAI,CAACS,EAAD,CAAJ,IAAY,CAAb,IAAkB,CAA7B;MACD,CAFD;IAGD;;IACD,IAAIC,OAAO,GAAG,CAAd;;IACA,KAAK,MAAMC,IAAX,IAAmBX,IAAnB,EAAyB;MACvB,IAAIA,IAAI,CAACW,IAAD,CAAJ,GAAa,CAAb,IAAkBA,IAAI,CAACN,MAAL,GAAc,CAApC,EAAuC;QACrC,IAAIO,MAAM,GAAG;UACXC,KAAK,EAAEF,IADI;UAEXG,KAAK,EAAEd,IAAI,CAACW,IAAD,CAFA;UAGXI,GAAG,EAAEC,MAAM,CAACN,OAAD;QAHA,CAAb;QAKAb,OAAO,CAACoB,MAAM,IAAI,CAAC,GAAGA,MAAJ,EAAYL,MAAZ,CAAX,CAAP;QACAF,OAAO;QACPQ,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BvB,IAA7B;QACAsB,OAAO,CAACC,GAAR,CAAYzB,IAAZ;MACD;IACF;EACF,CAtBQ,EAsBN,CAACA,IAAD,CAtBM,CAAT;;EAwBA,MAAM0B,WAAW,GAAG,MAAM;IACxB,IAAIxB,IAAI,CAACS,MAAL,GAAc,CAAlB,EAAqB;MACnB,oBACE;QAAA,uBACE,QAAC,QAAD;UACE,OAAO,EAAE,EADX;UAEE,OAAO,EAAE,EAFX;UAGE,IAAI,EAAET,IAHR;UAIE,OAAO,EAAE;QAJX;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF;IAUD,CAXD,MAWO;MACL,oBACE;QAAA,uBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF;IAKD;EACF,CAnBD;;EAqBA,oBACE;IAAA,WACG,GADH,eAEE,QAAC,WAAD;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CA1DM;;GAAMH,S;UAEMH,W,EACFC,W;;;KAHJE,S;AA4Db,OAAO,MAAM4B,aAAa,gBAAGnC,KAAK,CAACoC,IAAN,CAAW7B,SAAX,CAAtB;MAAM4B,a"},"metadata":{},"sourceType":"module"}